// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema]

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String
  firstname       String
  lastname        String
  middlename      String?
  birthdate       DateTime
  preference      UserPreference?
  locations       UserLocations[]
  organizedEvents Event[]
  attendedEvents  EventGuest[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([email])
}

model UserPreference {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique
  eventCategories    String[]
  eventTypes         String[]
  notificationPrefs  String?
  locationPreference String?
}

model UserLocations {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  name     String
  city     String
  province String
  country  String
  zipCode  Int
}

model Event {
  id            String          @id @default(uuid())
  organizer     User            @relation(fields: [organizerId], references: [id])
  organizerId   String
  title         String
  desc          String
  category      String
  date          DateTime
  startTime     String?
  endTime       String?
  location      String
  status        EventStatus
  guests        EventGuest[]
  EventTimeline EventTimeline[]
  finances      Finance[]       @relation("EventFinance")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([title])
}

enum EventStatus {
  DONE
  CANCELED
  RESCHEDULED
  UPCOMING
}

model EventGuest {
  id         String     @id @default(uuid())
  event      Event      @relation(fields: [eventId], references: [id])
  eventId    String
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  rsvpStatus RsvpStatus
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum RsvpStatus {
  CONFIRMED
  DECLINED
}

model EventTimeline {
  id          String   @id @default(uuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  date        DateTime
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Finance {
  id          String      @id @default(uuid())
  event       Event?      @relation("EventFinance", fields: [eventId], references: [id])
  eventId     String
  description String
  amount      Decimal
  type        FinanceType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum FinanceType {
  INCOME
  EXPENSE
}
